{"ast":null,"code":"import { takeLatest, call, put, all } from 'redux-saga/effects'; //listes every actions depending on the type it is passed\n\nimport ShopActionTypes from './shop.types';\nimport { firestore, convertCollectionsSnapchotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsSuccessful, fetchCollectionsFailure } from \"./shop.actions\";\nexport function* fetchCollectionsAsync() {\n  try {\n    const CollectionRef = firestore.collection('collections'); //name of the collection in firestore\n\n    const snapshot = yield CollectionRef.get();\n    const collectionsMap = yield call(convertCollectionsSnapchotToMap, snapshot);\n    yield put(fetchCollectionsSuccessful(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  }\n} //function that pauses when a specific action is passed\n//first parameter is the action passed, 2nd param is what to follow if the action is passed\n\nexport function* fetchCollectionsStart() {\n  yield takeLatest( //takeLatest gets the last actinos from many\n  ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}\nexport function* shopSagas() {\n  yield all([call(fetchCollectionsStart)]);\n}","map":{"version":3,"sources":["C:/Users/josue/OneDrive/Escritorio/e-web/jg-cothing/client/src/redux/shop/shop.saga.js"],"names":["takeLatest","call","put","all","ShopActionTypes","firestore","convertCollectionsSnapchotToMap","fetchCollectionsSuccessful","fetchCollectionsFailure","fetchCollectionsAsync","CollectionRef","collection","snapshot","get","collectionsMap","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_START","shopSagas"],"mappings":"AAAA,SAAQA,UAAR,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,GAA/B,QAAyC,oBAAzC,C,CAA+D;;AAC/D,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAAQC,SAAR,EAAmBC,+BAAnB,QAAyD,+BAAzD;AACA,SAASC,0BAAT,EAAqCC,uBAArC,QAAoE,gBAApE;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AAErC,MAAG;AACC,UAAMC,aAAa,GAAGL,SAAS,CAACM,UAAV,CAAqB,aAArB,CAAtB,CADD,CAC0D;;AACzD,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMb,IAAI,CAACK,+BAAD,EAAkCM,QAAlC,CAAjC;AACA,UAAMV,GAAG,CAACK,0BAA0B,CAACO,cAAD,CAA3B,CAAT;AACH,GALD,CAKE,OAAOC,KAAP,EAAa;AACX,UAAMb,GAAG,CAACM,uBAAuB,CAACO,KAAK,CAACC,OAAP,CAAxB,CAAT;AACH;AACJ,C,CAED;AACA;;AACA,OAAO,UAAUC,qBAAV,GAAiC;AACpC,QAAMjB,UAAU,EAAI;AAChBI,EAAAA,eAAe,CAACc,uBADJ,EAEZT,qBAFY,CAAhB;AAIH;AAED,OAAO,UAAUU,SAAV,GAAqB;AACxB,QAAMhB,GAAG,CAAC,CACNF,IAAI,CAACgB,qBAAD,CADE,CAAD,CAAT;AAGH","sourcesContent":["import {takeLatest, call, put, all} from 'redux-saga/effects'; //listes every actions depending on the type it is passed\r\nimport ShopActionTypes from './shop.types';\r\nimport {firestore, convertCollectionsSnapchotToMap} from '../../firebase/firebase.utils';\r\nimport { fetchCollectionsSuccessful, fetchCollectionsFailure } from \"./shop.actions\";\r\n\r\nexport function* fetchCollectionsAsync() {\r\n\r\n    try{\r\n        const CollectionRef = firestore.collection('collections')//name of the collection in firestore\r\n        const snapshot = yield CollectionRef.get();\r\n        const collectionsMap = yield call(convertCollectionsSnapchotToMap, snapshot);\r\n        yield put(fetchCollectionsSuccessful(collectionsMap));\r\n    } catch (error){\r\n        yield put(fetchCollectionsFailure(error.message))\r\n    }\r\n}\r\n\r\n//function that pauses when a specific action is passed\r\n//first parameter is the action passed, 2nd param is what to follow if the action is passed\r\nexport function* fetchCollectionsStart(){\r\n    yield takeLatest(   //takeLatest gets the last actinos from many\r\n        ShopActionTypes.FETCH_COLLECTIONS_START,\r\n        fetchCollectionsAsync\r\n    )\r\n}\r\n\r\nexport function* shopSagas(){\r\n    yield all([\r\n        call(fetchCollectionsStart)\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}