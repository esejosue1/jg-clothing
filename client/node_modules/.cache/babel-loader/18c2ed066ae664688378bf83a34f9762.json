{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyAMg5w3B8-AJe66iGvPNkUwLBv4NwFOjfk\",\n  authDomain: \"jg-clothing.firebaseapp.com\",\n  projectId: \"jg-clothing\",\n  storageBucket: \"jg-clothing.appspot.com\",\n  messagingSenderId: \"893447692554\",\n  appId: \"1:893447692554:web:6ff08d9c15ffd8479b9af3\",\n  measurementId: \"G-9W03YTLB2E\"\n};\nfirebase.initializeApp(config);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date(); // if the user ref is not in the firestore databse,we will create a new object with its info and added to the database\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocument = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey); //fire one big set since firabase only allows to shot a set one at a time\n\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    //call the func instead of new array\n    const newDocRef = collectionRef.doc(); //doc at empry string, new doc reference and id\n\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n}; //convert the data into an array of objects instead of array\n\nexport const convertCollectionsSnapchotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data(); //final shape of the object we want\n\n    return {\n      //pass some string that the url cant hanle such as symbols\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  console.log(transformedCollection); //pass in the initial object, empty oject property with hats in lowercase =  hats.collection\n\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n}; //return the user auth promise to verify the users authentication session\n\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n}; //   firebase authentication access\n\nexport const auth = firebase.auth(); //  firebase store\n\nexport const firestore = firebase.firestore(); //firebase authentication utility\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["C:/Users/josue/OneDrive/Escritorio/e-web/jg-cothing/client/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocument","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapchotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\n    \r\nconst config ={\r\n    apiKey: \"AIzaSyAMg5w3B8-AJe66iGvPNkUwLBv4NwFOjfk\",\r\n    authDomain: \"jg-clothing.firebaseapp.com\",\r\n    projectId: \"jg-clothing\",\r\n    storageBucket: \"jg-clothing.appspot.com\",\r\n    messagingSenderId: \"893447692554\",\r\n    appId: \"1:893447692554:web:6ff08d9c15ffd8479b9af3\",\r\n    measurementId: \"G-9W03YTLB2E\"\r\n  }\r\n\r\n  firebase.initializeApp(config);\r\n\r\n  export const createUserProfileDocument = async (userAuth, additionalData)=>\r\n  {\r\n    if (!userAuth) return;\r\n\r\n    const userRef=firestore.doc(`users/${userAuth.uid}`);\r\n    const snapShot=await userRef.get();\r\n  \r\n    if(!snapShot.exists){\r\n      const {displayName, email} = userAuth;\r\n      const createdAt = new Date();\r\n      // if the user ref is not in the firestore databse,we will create a new object with its info and added to the database\r\n      try{\r\n        await userRef.set({\r\n          displayName,\r\n          email,\r\n          createdAt,\r\n          ...additionalData\r\n        })\r\n      }\r\n      catch(error){\r\n        console.log('error creating user', error.message)\r\n      }\r\n    }\r\n    return userRef;\r\n  };\r\n\r\n  export const addCollectionAndDocument = async (collectionKey, objectsToAdd) =>{\r\n    const collectionRef = firestore.collection(collectionKey);\r\n\r\n  //fire one big set since firabase only allows to shot a set one at a time\r\n  const batch = firestore.batch();\r\n  objectsToAdd.forEach((obj) =>{    //call the func instead of new array\r\n    const newDocRef = collectionRef.doc();  //doc at empry string, new doc reference and id\r\n    batch.set(newDocRef, obj);\r\n  });\r\n\r\n  return await batch.commit()\r\n  }\r\n\r\n  //convert the data into an array of objects instead of array\r\n  export const convertCollectionsSnapchotToMap =(collections)=>{\r\n    const transformedCollection = collections.docs.map(doc =>{\r\n      const {title, items} = doc.data();\r\n      //final shape of the object we want\r\n      return {\r\n        //pass some string that the url cant hanle such as symbols\r\n        routeName:encodeURI(title.toLowerCase()),\r\n        id: doc.id,\r\n        title,\r\n        items\r\n      };\r\n    });\r\n    console.log(transformedCollection)\r\n    //pass in the initial object, empty oject property with hats in lowercase =  hats.collection\r\n    return transformedCollection.reduce((accumulator, collection) =>{\r\n      accumulator[collection.title.toLowerCase()] = collection;\r\n      return accumulator;\r\n    }, {});\r\n  };\r\n\r\n  //return the user auth promise to verify the users authentication session\r\n  export const getCurrentUser = () =>{\r\n    return new Promise((resolve, reject) => {\r\n      const unsubscribe = auth.onAuthStateChanged(userAuth =>{\r\n        unsubscribe();\r\n        resolve(userAuth);\r\n      }, reject)\r\n    })\r\n  }\r\n\r\n//   firebase authentication access\r\n  export const auth = firebase.auth();\r\n//  firebase store\r\n  export const firestore = firebase.firestore();\r\n\r\n  //firebase authentication utility\r\n  export const googleProvider = new firebase.auth.GoogleAuthProvider();\r\n  googleProvider.setCustomParameters({prompt: 'select_account'});\r\n  export const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\r\n\r\n  export default firebase;"]},"metadata":{},"sourceType":"module"}