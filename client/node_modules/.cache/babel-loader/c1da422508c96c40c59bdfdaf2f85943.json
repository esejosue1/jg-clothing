{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from \"./user.types\";\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { signInFailure, signInSuccess, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure } from './user.actions'; //obtain the snapshot from the user when loggin \n\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} //google sign in\n\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} //check user with email and pass\n\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} //check for user auth.\n\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n; //user sign out\n\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n} //user sign up\n\nexport function* signUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    // creates a new user and account with the email, pass. \n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield put(signUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n} //user sign in after signing up\n\nexport function* signInAfterSignUp({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  yield getSnapshotFromUserAuth(user, additionalData);\n}\n;\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n;\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n;\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n;\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\n;\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\n;\nexport function* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n} //call each saga\n\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUpStart), call(onSignUpSuccess)]);\n}\n;","map":{"version":3,"sources":["C:/Users/josue/OneDrive/Escritorio/e-web/jg-cothing/client/src/redux/user/user.saga.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","getCurrentUser","signInFailure","signInSuccess","signOutSuccess","signOutFailure","signUpSuccess","signUpFailure","getSnapshotFromUserAuth","userAuth","additionalData","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","signOut","signUp","displayName","createUserWithEmailAndPassword","signInAfterSignUp","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","onSignUpStart","SIGN_UP_START","onSignUpSuccess","SIGN_UP_SUCCESS","userSagas"],"mappings":"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","sourcesContent":["import {takeLatest, put, all, call} from 'redux-saga/effects';\r\nimport UserActionTypes from \"./user.types\";\r\nimport {auth, googleProvider,createUserProfileDocument, getCurrentUser} from '../../firebase/firebase.utils';\r\nimport {signInFailure, signInSuccess, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure} from './user.actions';\r\n\r\n//obtain the snapshot from the user when loggin \r\nexport function* getSnapshotFromUserAuth(userAuth, additionalData){\r\n    try{\r\n        const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\r\n        const userSnapshot = yield userRef.get()\r\n        yield put(\r\n            signInSuccess({id: userSnapshot.id, ...userSnapshot.data()})\r\n        );\r\n    } catch(error){\r\n        yield put(signInFailure(error))\r\n    }\r\n}\r\n\r\n//google sign in\r\nexport function* signInWithGoogle(){\r\n    try{\r\n        const {user}= yield auth.signInWithPopup(googleProvider);\r\n        yield getSnapshotFromUserAuth(user)\r\n} catch(error){\r\n    yield put(signInFailure(error))\r\n\r\n}\r\n}\r\n\r\n//check user with email and pass\r\nexport function* signInWithEmail({payload: {email, password}}){\r\n    try {\r\n        const {user } = yield auth.signInWithEmailAndPassword(email, password);\r\n        yield getSnapshotFromUserAuth(user)\r\n} catch(error){\r\n    yield put(signInFailure(error))\r\n}\r\n}\r\n\r\n//check for user auth.\r\nexport function* isUserAuthenticated(){\r\n    try{\r\n        const userAuth = yield getCurrentUser()\r\n        if(!userAuth) return;\r\n        yield getSnapshotFromUserAuth(userAuth)\r\n    } catch(error){\r\n        yield put(signInFailure(error))\r\n    }\r\n};\r\n\r\n//user sign out\r\nexport function* signOut(){\r\n    try{\r\n        yield auth.signOut();\r\n        yield put(signOutSuccess())\r\n    }\r\n    catch(error){\r\n        yield put(signOutFailure(error))\r\n    }\r\n}\r\n\r\n//user sign up\r\nexport function* signUp({payload:{email, password, displayName} }){\r\n    try{\r\n        // creates a new user and account with the email, pass. \r\n        const {user} = yield auth.createUserWithEmailAndPassword(\r\n        email, password);\r\n    \r\n    yield put(signUpSuccess({user, additionalData:{displayName}}))\r\n    }catch(error){\r\n        yield put(signUpFailure(error))\r\n    }\r\n}\r\n\r\n//user sign in after signing up\r\nexport function* signInAfterSignUp({payload: {user, additionalData}}){\r\n    yield getSnapshotFromUserAuth(user, additionalData);\r\n};\r\n\r\nexport function* onGoogleSignInStart(){\r\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\r\n};\r\n\r\nexport function* onEmailSignInStart(){\r\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail)\r\n};\r\n\r\n\r\nexport function* onCheckUserSession(){\r\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated)\r\n};\r\n\r\nexport function* onSignOutStart (){\r\n    yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut)\r\n};\r\n\r\nexport function* onSignUpStart(){\r\n    yield takeLatest(UserActionTypes.SIGN_UP_START, signUp)\r\n};\r\n\r\nexport function* onSignUpSuccess(){\r\n    yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp)\r\n}\r\n\r\n\r\n//call each saga\r\nexport function* userSagas(){\r\n    yield all([\r\n        call(onGoogleSignInStart),\r\n        call(onEmailSignInStart), \r\n        call(onCheckUserSession),\r\n        call(onSignOutStart),\r\n        call(onSignUpStart),\r\n        call(onSignUpSuccess)\r\n    ])\r\n};"]},"metadata":{},"sourceType":"module"}